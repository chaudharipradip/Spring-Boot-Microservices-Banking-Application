pipeline {
    agent any

   parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev','qa', 'staging', 'prod'], description: 'Select environment to deploy') 

        choice(name: 'Type', choices: ['Snapshot', 'Release'], description: 'Select Build Type')
    }

    environment {
        // BASE_VERSION = '0.0.1'
        PROJECT_VERSION_PREFIX = '0.0.1'
        MAVEN_CLI_OPTS = '-B -DskipTests'
        

    }

    stages {



        stage('Checkout') {
            steps {
               // git 'https://github.com/chaudharipradip/Spring-Boot-Microservices-Banking-Application.git'
                git branch: 'main', url: 'https://github.com/chaudharipradip/Spring-Boot-Microservices-Banking-Application.git'

            }
        }

        stage('Generate Timestamped Version') {
            steps {
                script {
                    def timestamp = new Date().format("yyyyMMdd.HHmmss", TimeZone.getTimeZone('UTC'))
                    def buildNumber = env.BUILD_NUMBER ?: '0'
                    env.DYNAMIC_VERSION = "${timestamp}-${buildNumber}"
                    echo "Using dynamic version: ${env.DYNAMIC_VERSION}"
                }
            }
        }

        stage('Prepare Version') {
                    steps {
                        script {
                            def versionSuffix = ''
                            if (params.Type == 'Release') {
                                versionSuffix = ''         // release version, no suffix
                                def timestamp = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))
                                def buildNumber = env.BUILD_NUMBER ?: '0'
                                versionSuffix = "-${timestamp}.${buildNumber}"
                                env.BUILD_VERSION = "${timestamp}-${buildNumber}"
                            } else {
                                versionSuffix = ''         // release version, no suffix
                                def timestamp = new Date().format("yyyyMMdd.HHmmss", TimeZone.getTimeZone('UTC'))
                                def buildNumber = env.BUILD_NUMBER ?: '0'
                                versionSuffix = "-${timestamp}-${buildNumber}"
                                env.BUILD_VERSION = "${timestamp}-${buildNumber}"// snapshot suffix for others
                            }
                            // def fullVersion = "${env.PROJECT_VERSION_PREFIX}${versionSuffix}"
                            echo "Setting Maven version to: ${env.BUILD_VERSION}"
                            // sh "cd API-Gateway && mvn versions:set -DnewVersion=${fullVersion} -DgenerateBackupPoms=false"
                        }
                    }
        }



        stage('Build & Deploy') {
            steps {
     
     //	configFileProvider([configFile(fileId: 'maven-settings-devops', variable: 'MAVEN_SETTINGS')]) {
			//2	sh "cd API-Gateway && mvn -B clean deploy -Dproject.version.prefix=${PROJECT_VERSION_PREFIX} -Dbuild.number=${env.BUILD_VERSION} -P${params.ENVIRONMENT} -DskipTests -Ddeploy.snapshot.url=http://localhost:8081/repository/qa-snapshots -Ddeploy.repo.url=http://localhost:8081/repository/qa-releases"
		//	}
     			sh "cd API-Gateway && mvn -B clean deploy -s /etc/maven/settings_profile.xml -Dproject.version.prefix=${PROJECT_VERSION_PREFIX} -Dbuild.number=${env.BUILD_VERSION} -P${params.ENVIRONMENT} -DskipTests"
                //1 sh "cd API-Gateway && mvn -B clean deploy -Dproject.version.prefix=${PROJECT_VERSION_PREFIX} -Dbuild.number=${env.BUILD_VERSION} -P${params.ENVIRONMENT} -DskipTests"
            }
        }

      
    }

  post {
            success {
                echo "Deployment to ${params.ENVIRONMENT} - ${params.Type} Nexus repo successful."
            }
            failure {
                echo "Deployment to ${params.ENVIRONMENT} - ${params.Type} failed."
            }
        }
}
